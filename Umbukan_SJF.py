# -*- coding: utf-8 -*-
"""Copy of Activity 5b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bHB4FD80IDj7Xjayd9DQJ7Ll0TxMLRvV
"""

import matplotlib.pyplot as plt 
# Python3 program for implementation of FCFS  
# scheduling with different arrival time  
  
# Function to find the waiting time 
# for all processes  
def findWaitingTime(processes, n, bt, wt, at):  
    service_time = [0] * n  
    service_time[0] = 0
    wt[0] = 0
  
    # calculating waiting time  
    for i in range(1, n):  
          
        # Add burst time of previous processes  
        service_time[i] = (service_time[i - 1] +
                                     bt[i - 1])  
  
        # Find waiting time for current 
        # process = sum - at[i]  
        wt[i] = service_time[i] - at[i]  
  
        # If waiting time for a process is in  
        # negative that means it is already  
        # in the ready queue before CPU becomes  
        # idle so its waiting time is 0  
        if (wt[i] < 0): 
            wt[i] = 0
      
# Function to calculate turn around time  
def findTurnAroundTime(processes, n, bt, wt, tat):  
      
    # Calculating turnaround time by 
    # adding bt[i] + wt[i]  
    for i in range(n): 
        tat[i] = bt[i] + wt[i]  
  
  
# Function to calculate average waiting  
# and turn-around times.  
def findavgTime(processes, n, bt, at):  
    wt = [0] * n 
    tat = [0] * n  
  
    # Function to find waiting time 
    # of all processes  
    findWaitingTime(processes, n, bt, wt, at)  
  
    # Function to find turn around time for 
    # all processes  
    findTurnAroundTime(processes, n, bt, wt, tat)  
  
    # Display processes along with all details  
    print("Processes   Burst Time   Arrival Time     Waiting",  
          "Time   Turn-Around Time  Completion Time \n") 
    total_wt = 0
    total_tat = 0
    for i in range(n): 
  
        total_wt = total_wt + wt[i]  
        total_tat = total_tat + tat[i]  
        compl_time = tat[i] + at[i]  
        print(" ", i + 1, "\t\t", bt[i], "\t\t", at[i],  
              "\t\t", wt[i], "\t\t ", tat[i], "\t\t ", compl_time)  
  
    print("Average waiting time = %.5f "%(total_wt /n)) 
    print("\nAverage turn around time = ", total_tat / n)  
  
# Driver code  
if __name__ =="__main__": 
      
    # Process id's  
    processes = [1, 2, 3] 
    n = 3
  
    # Burst time of all processes  
    burst_time = [2, 6, 7]  
  
    # Arrival time of all processes  
    arrival_time = [0, 2, 3]  
  
    findavgTime(processes, n, burst_time, 
                            arrival_time) 
    
def ganttMake(a,b):
  # Declaring a figure "gnt" 
  fig, gnt = plt.subplots() 
  
  # Setting Y-axis limits 
  gnt.set_ylim(0, 50) 
  
  # Setting X-axis limits 
  gnt.set_xlim(0, 15) 
  
  # Setting labels for x-axis and y-axis 
  gnt.set_xlabel('MS') 
  gnt.set_ylabel('Processor') 
  
  # Setting ticks on y-axis 
  gnt.set_yticks([15, 25, 35]) 
  # Labelling tickes of y-axis 
  gnt.set_yticklabels(['P3', 'P2', 'P1']) 
  
  # Setting graph attribute 
  gnt.grid(True) 
  y=30
  free=0
  for i in range(3):
    

    
    gnt.broken_barh([(free, b[i])], (y, 9), facecolors =('tab:red')) 
    
    y-=10
    free=a[i]+b[i]

  # Declaring a bar in schedule 
  # gnt.broken_barh([(0, 2)], (30, 9), facecolors =('tab:orange')) 
  
  # Declaring multiple bars in at same level and same width 
  # gnt.broken_barh([(2, 6), (150, 10)], (20, 9), 
  #                        facecolors ='tab:blue') 
  
  # gnt.broken_barh([(8, 7)], (10, 9), 
  #                                 facecolors =('tab:red')) 
  
  plt.savefig("gantt1.png")




  
# This code is contributed 
# Shubham Singh(SHUBHAMSINGH10)

# Importing the matplotlb.pyplot 
import matplotlib.pyplot as plt 
  
# Declaring a figure "gnt" 
fig, gnt = plt.subplots() 
  
# Setting Y-axis limits 
gnt.set_ylim(0, 50) 
  
# Setting X-axis limits 
gnt.set_xlim(0, 15) 
  
# Setting labels for x-axis and y-axis 
gnt.set_xlabel('MS') 
gnt.set_ylabel('Processor') 
  
# Setting ticks on y-axis 
gnt.set_yticks([15, 25, 35]) 
# Labelling tickes of y-axis 
gnt.set_yticklabels(['P3', 'P2', 'P1']) 
  
# Setting graph attribute 
gnt.grid(True) 
  
# Declaring a bar in schedule 
gnt.broken_barh([(0, 2)], (30, 9), facecolors =('tab:orange')) 
  
# Declaring multiple bars in at same level and same width 
gnt.broken_barh([(2, 6), (150, 10)], (20, 9), 
                         facecolors ='tab:blue') 
  
gnt.broken_barh([(8, 7)], (10, 9), 
                                  facecolors =('tab:red')) 
  
plt.savefig("gantt1.png")

